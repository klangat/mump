# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountEmailaddress(models.Model):
    email = models.CharField(unique=True, max_length=254)
    verified = models.IntegerField()
    primary = models.IntegerField()
    user = models.ForeignKey('AccountsUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailaddress'


class AccountEmailconfirmation(models.Model):
    created = models.DateTimeField()
    sent = models.DateTimeField(blank=True, null=True)
    key = models.CharField(unique=True, max_length=64)
    email_address = models.ForeignKey(AccountEmailaddress, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailconfirmation'


class AccountsEmailactivation(models.Model):
    email = models.CharField(max_length=254)
    key = models.CharField(max_length=120, blank=True, null=True)
    activated = models.IntegerField()
    forced_expired = models.IntegerField()
    expires = models.IntegerField()
    timestamp = models.DateTimeField()
    update = models.DateTimeField()
    user = models.ForeignKey('AccountsUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_emailactivation'


class AccountsGuestemail(models.Model):
    email = models.CharField(max_length=254)
    active = models.IntegerField()
    update = models.DateTimeField()
    timestamp = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'accounts_guestemail'


class AccountsUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    email = models.CharField(unique=True, max_length=255)
    full_name = models.CharField(max_length=255)
    phone = models.CharField(max_length=15)
    id_number = models.IntegerField()
    is_active = models.IntegerField()
    staff = models.IntegerField()
    admin = models.IntegerField()
    timestamp = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'accounts_user'


class AddressesAddress(models.Model):
    name = models.CharField(max_length=120, blank=True, null=True)
    nickname = models.CharField(max_length=120, blank=True, null=True)
    address_type = models.CharField(max_length=120)
    residence = models.CharField(max_length=120)
    phone_number = models.CharField(max_length=50)
    billing_profile = models.ForeignKey('BillingBillingprofile', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'addresses_address'


class AnalyticsObjectviewed(models.Model):
    ip_address = models.CharField(max_length=220, blank=True, null=True)
    object_id = models.PositiveIntegerField()
    timestamp = models.DateTimeField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'analytics_objectviewed'


class AnalyticsUsersession(models.Model):
    ip_address = models.CharField(max_length=220, blank=True, null=True)
    session_key = models.CharField(max_length=100, blank=True, null=True)
    timestamp = models.DateTimeField()
    active = models.IntegerField()
    ended = models.IntegerField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'analytics_usersession'



class BillingBillingprofile(models.Model):
    email = models.CharField(max_length=254)
    active = models.IntegerField()
    update = models.DateTimeField()
    timestamp = models.DateTimeField()
    customer_id = models.CharField(max_length=120, blank=True, null=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, unique=True, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'billing_billingprofile'


class BillingCard(models.Model):
    stripe_id = models.CharField(max_length=120)
    brand = models.CharField(max_length=120, blank=True, null=True)
    country = models.CharField(max_length=20, blank=True, null=True)
    exp_month = models.IntegerField(blank=True, null=True)
    exp_year = models.IntegerField(blank=True, null=True)
    last4 = models.CharField(max_length=4, blank=True, null=True)
    default = models.IntegerField()
    active = models.IntegerField()
    timestamp = models.DateTimeField()
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'billing_card'


class BillingCharge(models.Model):
    stripe_id = models.CharField(max_length=120)
    paid = models.IntegerField()
    refunded = models.IntegerField()
    outcome = models.TextField(blank=True, null=True)
    outcome_type = models.CharField(max_length=120, blank=True, null=True)
    seller_message = models.CharField(max_length=120, blank=True, null=True)
    risk_level = models.CharField(max_length=120, blank=True, null=True)
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'billing_charge'


class CartsCart(models.Model):
    subtotal = models.DecimalField(max_digits=50, decimal_places=2)
    total = models.DecimalField(max_digits=50, decimal_places=2)
    updated = models.DateTimeField()
    timestamp = models.DateTimeField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'carts_cart'


class CartsCartProducts(models.Model):
    cart = models.ForeignKey(CartsCart, models.DO_NOTHING)
    product = models.ForeignKey('ProductsProduct', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'carts_cart_products'
        unique_together = (('cart', 'product'),)


class Categories(models.Model):
    name = models.CharField(max_length=50)
    slug = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    active = models.IntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'categories'


class MarketingMarketingpreference(models.Model):
    subscribed = models.IntegerField()
    mailchimp_subscribed = models.IntegerField(blank=True, null=True)
    mailchimp_msg = models.TextField(blank=True, null=True)
    timestamp = models.DateTimeField()
    updated = models.DateTimeField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'marketing_marketingpreference'


class OrdersOrder(models.Model):
    order_id = models.CharField(max_length=120)
    status = models.CharField(max_length=120)
    residence_total = models.DecimalField(max_digits=50, decimal_places=2)
    total = models.DecimalField(max_digits=50, decimal_places=2)
    active = models.IntegerField()
    updated = models.DateTimeField()
    timestamp = models.DateTimeField()
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING, blank=True, null=True)
    cart = models.ForeignKey(CartsCart, models.DO_NOTHING)
    personal_pick = models.ForeignKey(AddressesAddress, models.DO_NOTHING, blank=True, null=True)
    residence = models.ForeignKey(AddressesAddress, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'orders_order'


class OrdersProductpurchase(models.Model):
    order_id = models.CharField(max_length=120)
    refunded = models.IntegerField()
    updated = models.DateTimeField()
    timestamp = models.DateTimeField()
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING)
    product = models.ForeignKey('ProductsProduct', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'orders_productpurchase'



class ProductsProduct(models.Model):
    title = models.CharField(max_length=120)
    slug = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    image = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=20, decimal_places=2)
    featured = models.IntegerField()
    active = models.IntegerField()
    timestamp = models.DateTimeField()
    is_digital = models.IntegerField()
    category = models.ForeignKey(Categories, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'products_product'



class TagsTag(models.Model):
    title = models.CharField(max_length=120)
    slug = models.CharField(max_length=50)
    timestamp = models.DateTimeField()
    active = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'tags_tag'


class TagsTagProducts(models.Model):
    tag = models.ForeignKey(TagsTag, models.DO_NOTHING)
    product = models.ForeignKey(ProductsProduct, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'tags_tag_products'
        unique_together = (('tag', 'product'),)
