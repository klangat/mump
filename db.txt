# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountEmailaddress(models.Model):
    email = models.CharField(unique=True, max_length=254)
    verified = models.IntegerField()
    primary = models.IntegerField()
    user = models.ForeignKey('AccountsUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailaddress'


class AccountEmailconfirmation(models.Model):
    created = models.DateTimeField()
    sent = models.DateTimeField(blank=True, null=True)
    key = models.CharField(unique=True, max_length=64)
    email_address = models.ForeignKey(AccountEmailaddress, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailconfirmation'


class AccountsEmailactivation(models.Model):
    email = models.CharField(max_length=254)
    key = models.CharField(max_length=120, blank=True, null=True)
    activated = models.IntegerField()
    forced_expired = models.IntegerField()
    expires = models.IntegerField()
    timestamp = models.DateTimeField()
    update = models.DateTimeField()
    user = models.ForeignKey('AccountsUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_emailactivation'


class AccountsGuestemail(models.Model):
    email = models.CharField(max_length=254)
    active = models.IntegerField()
    update = models.DateTimeField()
    timestamp = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'accounts_guestemail'


class AccountsUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    email = models.CharField(unique=True, max_length=255)
    full_name = models.CharField(max_length=255)
    is_active = models.IntegerField()
    staff = models.IntegerField()
    admin = models.IntegerField()
    timestamp = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'accounts_user'


class AddressesAddress(models.Model):
    name = models.CharField(max_length=120, blank=True, null=True)
    nickname = models.CharField(max_length=120, blank=True, null=True)
    address_type = models.CharField(max_length=120)
    residence = models.CharField(max_length=120)
    phone_number = models.CharField(max_length=50)
    billing_profile = models.ForeignKey('BillingBillingprofile', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'addresses_address'


class AnalyticsObjectviewed(models.Model):
    ip_address = models.CharField(max_length=220, blank=True, null=True)
    object_id = models.PositiveIntegerField()
    timestamp = models.DateTimeField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'analytics_objectviewed'


class AnalyticsUsersession(models.Model):
    ip_address = models.CharField(max_length=220, blank=True, null=True)
    session_key = models.CharField(max_length=100, blank=True, null=True)
    timestamp = models.DateTimeField()
    active = models.IntegerField()
    ended = models.IntegerField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'analytics_usersession'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class BillingBillingprofile(models.Model):
    email = models.CharField(max_length=254)
    active = models.IntegerField()
    update = models.DateTimeField()
    timestamp = models.DateTimeField()
    customer_id = models.CharField(max_length=120, blank=True, null=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, unique=True, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'billing_billingprofile'


class BillingCard(models.Model):
    stripe_id = models.CharField(max_length=120)
    brand = models.CharField(max_length=120, blank=True, null=True)
    country = models.CharField(max_length=20, blank=True, null=True)
    exp_month = models.IntegerField(blank=True, null=True)
    exp_year = models.IntegerField(blank=True, null=True)
    last4 = models.CharField(max_length=4, blank=True, null=True)
    default = models.IntegerField()
    active = models.IntegerField()
    timestamp = models.DateTimeField()
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'billing_card'


class BillingCharge(models.Model):
    stripe_id = models.CharField(max_length=120)
    paid = models.IntegerField()
    refunded = models.IntegerField()
    outcome = models.TextField(blank=True, null=True)
    outcome_type = models.CharField(max_length=120, blank=True, null=True)
    seller_message = models.CharField(max_length=120, blank=True, null=True)
    risk_level = models.CharField(max_length=120, blank=True, null=True)
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'billing_charge'


class CartsCart(models.Model):
    subtotal = models.DecimalField(max_digits=50, decimal_places=2)
    total = models.DecimalField(max_digits=50, decimal_places=2)
    updated = models.DateTimeField()
    timestamp = models.DateTimeField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'carts_cart'


class CartsCartProducts(models.Model):
    cart = models.ForeignKey(CartsCart, models.DO_NOTHING)
    product = models.ForeignKey('ProductsProduct', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'carts_cart_products'
        unique_together = (('cart', 'product'),)


class Categories(models.Model):
    name = models.CharField(max_length=50)
    slug = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    active = models.IntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'categories'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DjangoSite(models.Model):
    domain = models.CharField(unique=True, max_length=100)
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'django_site'


class MarketingMarketingpreference(models.Model):
    subscribed = models.IntegerField()
    mailchimp_subscribed = models.IntegerField(blank=True, null=True)
    mailchimp_msg = models.TextField(blank=True, null=True)
    timestamp = models.DateTimeField()
    updated = models.DateTimeField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING, unique=True)

    class Meta:
        managed = False
        db_table = 'marketing_marketingpreference'


class OrdersOrder(models.Model):
    order_id = models.CharField(max_length=120)
    shipping_address_final = models.TextField(blank=True, null=True)
    billing_address_final = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=120)
    shipping_total = models.DecimalField(max_digits=50, decimal_places=2)
    total = models.DecimalField(max_digits=50, decimal_places=2)
    active = models.IntegerField()
    updated = models.DateTimeField()
    timestamp = models.DateTimeField()
    billing_address = models.ForeignKey(AddressesAddress, models.DO_NOTHING, blank=True, null=True)
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING, blank=True, null=True)
    cart = models.ForeignKey(CartsCart, models.DO_NOTHING)
    shipping_address = models.ForeignKey(AddressesAddress, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'orders_order'


class OrdersProductpurchase(models.Model):
    order_id = models.CharField(max_length=120)
    refunded = models.IntegerField()
    updated = models.DateTimeField()
    timestamp = models.DateTimeField()
    billing_profile = models.ForeignKey(BillingBillingprofile, models.DO_NOTHING)
    product = models.ForeignKey('ProductsProduct', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'orders_productpurchase'


class PaypalIpn(models.Model):
    business = models.CharField(max_length=127)
    charset = models.CharField(max_length=255)
    custom = models.CharField(max_length=256)
    notify_version = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    parent_txn_id = models.CharField(max_length=19)
    receiver_email = models.CharField(max_length=254)
    receiver_id = models.CharField(max_length=255)
    residence_country = models.CharField(max_length=2)
    test_ipn = models.IntegerField()
    txn_id = models.CharField(max_length=255)
    txn_type = models.CharField(max_length=255)
    verify_sign = models.CharField(max_length=255)
    address_country = models.CharField(max_length=64)
    address_city = models.CharField(max_length=40)
    address_country_code = models.CharField(max_length=64)
    address_name = models.CharField(max_length=128)
    address_state = models.CharField(max_length=40)
    address_status = models.CharField(max_length=255)
    address_street = models.CharField(max_length=200)
    address_zip = models.CharField(max_length=20)
    contact_phone = models.CharField(max_length=20)
    first_name = models.CharField(max_length=64)
    last_name = models.CharField(max_length=64)
    payer_business_name = models.CharField(max_length=127)
    payer_email = models.CharField(max_length=127)
    payer_id = models.CharField(max_length=13)
    auth_amount = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    auth_exp = models.CharField(max_length=28)
    auth_id = models.CharField(max_length=19)
    auth_status = models.CharField(max_length=255)
    exchange_rate = models.DecimalField(max_digits=64, decimal_places=16, blank=True, null=True)
    invoice = models.CharField(max_length=127)
    item_name = models.CharField(max_length=127)
    item_number = models.CharField(max_length=127)
    mc_currency = models.CharField(max_length=32)
    mc_fee = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    mc_gross = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    mc_handling = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    mc_shipping = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    memo = models.CharField(max_length=255)
    num_cart_items = models.IntegerField(blank=True, null=True)
    option_name1 = models.CharField(max_length=64)
    option_name2 = models.CharField(max_length=64)
    payer_status = models.CharField(max_length=255)
    payment_date = models.DateTimeField(blank=True, null=True)
    payment_gross = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    payment_status = models.CharField(max_length=255)
    payment_type = models.CharField(max_length=255)
    pending_reason = models.CharField(max_length=255)
    protection_eligibility = models.CharField(max_length=255)
    quantity = models.IntegerField(blank=True, null=True)
    reason_code = models.CharField(max_length=255)
    remaining_settle = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    settle_amount = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    settle_currency = models.CharField(max_length=32)
    shipping = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    shipping_method = models.CharField(max_length=255)
    tax = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    transaction_entity = models.CharField(max_length=255)
    auction_buyer_id = models.CharField(max_length=64)
    auction_closing_date = models.DateTimeField(blank=True, null=True)
    auction_multi_item = models.IntegerField(blank=True, null=True)
    for_auction = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    amount = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    amount_per_cycle = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    initial_payment_amount = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    next_payment_date = models.DateTimeField(blank=True, null=True)
    outstanding_balance = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    payment_cycle = models.CharField(max_length=255)
    period_type = models.CharField(max_length=255)
    product_name = models.CharField(max_length=255)
    product_type = models.CharField(max_length=255)
    profile_status = models.CharField(max_length=255)
    recurring_payment_id = models.CharField(max_length=255)
    rp_invoice_id = models.CharField(max_length=127)
    time_created = models.DateTimeField(blank=True, null=True)
    amount1 = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    amount2 = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    amount3 = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    mc_amount1 = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    mc_amount2 = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    mc_amount3 = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    password = models.CharField(max_length=24)
    period1 = models.CharField(max_length=255)
    period2 = models.CharField(max_length=255)
    period3 = models.CharField(max_length=255)
    reattempt = models.CharField(max_length=1)
    recur_times = models.IntegerField(blank=True, null=True)
    recurring = models.CharField(max_length=1)
    retry_at = models.DateTimeField(blank=True, null=True)
    subscr_date = models.DateTimeField(blank=True, null=True)
    subscr_effective = models.DateTimeField(blank=True, null=True)
    subscr_id = models.CharField(max_length=19)
    username = models.CharField(max_length=64)
    case_creation_date = models.DateTimeField(blank=True, null=True)
    case_id = models.CharField(max_length=255)
    case_type = models.CharField(max_length=255)
    receipt_id = models.CharField(max_length=255)
    currency_code = models.CharField(max_length=32)
    handling_amount = models.DecimalField(max_digits=64, decimal_places=2, blank=True, null=True)
    transaction_subject = models.CharField(max_length=256)
    ipaddress = models.CharField(max_length=39, blank=True, null=True)
    flag = models.IntegerField()
    flag_code = models.CharField(max_length=16)
    flag_info = models.TextField()
    query = models.TextField()
    response = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    from_view = models.CharField(max_length=6, blank=True, null=True)
    mp_id = models.CharField(max_length=128, blank=True, null=True)
    option_selection1 = models.CharField(max_length=200)
    option_selection2 = models.CharField(max_length=200)

    class Meta:
        managed = False
        db_table = 'paypal_ipn'


class ProductsProduct(models.Model):
    title = models.CharField(max_length=120)
    slug = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    image = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=20, decimal_places=2)
    featured = models.IntegerField()
    active = models.IntegerField()
    timestamp = models.DateTimeField()
    is_digital = models.IntegerField()
    category = models.ForeignKey(Categories, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'products_product'


class SocialaccountSocialaccount(models.Model):
    provider = models.CharField(max_length=30)
    uid = models.CharField(max_length=191)
    last_login = models.DateTimeField()
    date_joined = models.DateTimeField()
    extra_data = models.TextField()
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialaccount'
        unique_together = (('provider', 'uid'),)


class SocialaccountSocialapp(models.Model):
    provider = models.CharField(max_length=30)
    name = models.CharField(max_length=40)
    client_id = models.CharField(max_length=191)
    secret = models.CharField(max_length=191)
    key = models.CharField(max_length=191)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp'


class SocialaccountSocialappSites(models.Model):
    socialapp = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp_sites'
        unique_together = (('socialapp', 'site'),)


class SocialaccountSocialtoken(models.Model):
    token = models.TextField()
    token_secret = models.TextField()
    expires_at = models.DateTimeField(blank=True, null=True)
    account = models.ForeignKey(SocialaccountSocialaccount, models.DO_NOTHING)
    app = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialtoken'
        unique_together = (('app', 'account'),)


class TagsTag(models.Model):
    title = models.CharField(max_length=120)
    slug = models.CharField(max_length=50)
    timestamp = models.DateTimeField()
    active = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'tags_tag'


class TagsTagProducts(models.Model):
    tag = models.ForeignKey(TagsTag, models.DO_NOTHING)
    product = models.ForeignKey(ProductsProduct, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'tags_tag_products'
        unique_together = (('tag', 'product'),)
